fn main() {
    // ==============================================
    // Переменные (Immutable variables)
    // ==============================================
    println!("\n\x1b[36m=== Переменные ===\x1b[0m");
    
    // Неизменяемая строковая переменная
    let greeting = "Привет";
    println!("Приветствие: \x1b[33m{}\x1b[0m", greeting);
    
    // Неизменяемая числовая переменная с указанием типа
    let score: i32 = 99;
    println!("Счёт: \x1b[33m{}\x1b[0m", score);
    
    // Попытка изменить неизменяемую переменную (раскомментировать для ошибки)
    // score = 100;  // Ошибка: нельзя изменять неизменяемую переменную

    // ==============================================
    // Изменяемые переменные (Mutable variables)
    // ==============================================
    println!("\n\x1b[36m=== Изменяемые переменные ===\x1b[0m");
    
    // Изменяемая строковая переменная
    let mut message = "Привет";
    println!("[До] Сообщение: \x1b[33m{}\x1b[0m", message);
    message = "Как дела?";
    println!("[После] Сообщение: \x1b[33m{}\x1b[0m", message);
    
    // Изменяемая числовая переменная
    let mut counter: i32 = 99;
    println!("[До] Счётчик: \x1b[33m{}\x1b[0m", counter);
    counter += 100;  // Увеличиваем на 100
    println!("[После] Счётчик: \x1b[33m{}\x1b[0m", counter);
    
    // Изменение типа не допускается даже для mut
    // message = 123;  // Ошибка: несоответствие типов

    // ==============================================
    // Затенение переменных (Variable shadowing)
    // ==============================================
    println!("\n\x1b[36m=== Затенение переменных ===\x1b[0m");
    
    let distance: i32 = 99;
    println!("Расстояние (м): \x1b[33m{}\x1b[0m", distance);
    
    // Затеняем переменную новым значением (того же типа)
    let distance = 299;
    println!("Новое расстояние (м): \x1b[33m{}\x1b[0m", distance);
    
    // Затенение с изменением типа
    let distance = "далеко";
    println!("Расстояние (качество): \x1b[33m{}\x1b[0m", distance);
    
    // Затенение в блоке scope
    let value = 5;
    {
        let value = value * 2;
        println!("Значение во внутреннем блоке: \x1b[33m{}\x1b[0m", value);
    }
    println!("Значение во внешнем блоке: \x1b[33m{}\x1b[0m", value);
    
    // Полезное затенение при преобразовании типов
    let input = "42";
    println!("Строковый ввод: \x1b[33m{}\x1b[0m", input);
    let input: i32 = input.parse().expect("Не число!");
    println!("Числовой ввод: \x1b[33m{}\x1b[0m", input);
}