const MAX_USERS: usize = 100;

fn main() {
    // ==============================================
    // Константы (Constants)
    // ==============================================
    println!("\n\x1b[36m=== Константы ===\x1b[0m");  // Цветной заголовок
    
    // Числовая константа с разделителем тысяч
    const MAX_POINTS: u32 = 100_000;
    println!("Максимальное количество очков: \x1b[33m{}\x1b[0m", MAX_POINTS);
    
    // Константа с плавающей точкой
    const PI: f64 = 3.14159;
    println!("Значение π (пи): \x1b[33m{:.5}\x1b[0m", PI);  // Вывод с 5 знаками после запятой
    
    // Строковая константа
    const APPLICATION_NAME: &str = "My Rust App";
    println!("Название приложения: \x1b[33m{}\x1b[0m", APPLICATION_NAME);
    
    // Глобальная константа (объявлена вне main)
    println!("Лимит пользователей: \x1b[33m{}\x1b[0m", MAX_USERS);

    // ==============================================
    // Кортежи (Tuples)
    // ==============================================
    println!("\n\x1b[36m=== Кортежи ===\x1b[0m");
    
    // Создание кортежа с разными типами данных
    let user_data: (&str, u32, bool) = ("Иван Петров", 28, true);
    println!("Кортеж целиком: \x1b[33m{:?}\x1b[0m", user_data);
    
    // Доступ к элементам по индексу
    println!("Имя: \x1b[33m{}\x1b[0m", user_data.0);
    println!("Возраст: \x1b[33m{}\x1b[0m", user_data.1);
    println!("Активен: \x1b[33m{}\x1b[0m", user_data.2);
    
    // Деструктуризация кортежа
    let (name, age, is_active) = user_data;
    println!("Деструктуризация: {} ({} лет), активен: {}", name, age, is_active);

    // ==============================================
    // Массивы (Arrays)
    // ==============================================
    println!("\n\x1b[36m=== Массивы ===\x1b[0m");
    
    // Простой массив чисел
    let primes: [i32; 5] = [2, 3, 5, 7, 11];
    println!("Первые 5 простых чисел: \x1b[33m{:?}\x1b[0m", primes);
    println!("Третье простое число: \x1b[33m{}\x1b[0m", primes[2]);
    
    // Массив строк (дни недели)
    let days = ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"];
    println!("\nДни недели:");
    for (index, day) in days.iter().enumerate() {
        println!("  {}. {}", index + 1, day);
    }
    
    // Безопасный доступ к элементам
    match days.get(7) {
        Some(day) => println!("\nВосьмой день: {}", day),
        None => println!("\n\x1b[31mОшибка: в неделе только 7 дней!\x1b[0m"),
    }
    
    // Многомерный массив (матрица 3x3)
    let matrix: [[i32; 3]; 3] = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ];
    println!("\nМатрица 3x3:");
    for row in matrix.iter() {
        println!("  {:?}", row);
    }
    println!("Центральный элемент: \x1b[33m{}\x1b[0m", matrix[1][1]);
    
    // Массив с одинаковыми элементами
    let buffer = [0u8; 10];
    println!("\nБуфер из 10 нулей: \x1b[33m{:?}\x1b[0m", buffer);
}